1. Write a Python program to read an entire text file.

Solution : --------------------------------

f = open(r"C:\Users\Shivam\Desktop\example.txt","r")
print(f.read())
________________________________________________________________________________
f = open(r"C:\Users\Shivam\Desktop\example.txt","r")
print(f.readlines())
['this is line 1 \n', 'thies is line 2\n', 'this is line 3\n', 'this is line 4\n']
______________________________________________________________________________________________________________

2.   Write a program that counts lines and characters in a file. With your favorite text editor, code a Python module called mymod.py, which exports three top-level names:
a) A countLines(name) function that reads an input file and counts the number of lines in it 
b) A countChars(name) function that reads an input file and counts the number of characters in it 
c) A test(name) function that calls both counting functions with a given input filename. 
All three mymod functions should expect a filename string to be passed in.
Now, test your module interactively, using import and name qualification to fetch your exports. 

Solution :----------------------------------

mymod.py 

def test(name):
    f = open(name,"r")
    readfile = f.readlines()
    countLines(readfile)
    countChars(readfile)
    
def countLines(a):
    return print(len(a))

def countChars(a):
    count = 0
    for line in a:
        for ch in line:
            if(ch.isalpha()):
                count+=1
    print(count)


importfile.py in same directory 

import mymod

mymod.test(r"C:\Users\Shivam\Desktop\example.txt")

------------------------------------------------------

Q3 . Test your mymod module from Exercise 2 interactively, by using from to load the exports directly, first by name, then using the from* variant to fetch everything.

Solution 1 :
from mymod import count_lines, count_chars, test
  filename = "your_file.txt"  
  test(filename)
------------------------------------------------------
Solution 2 :
from mymod import *
   filename = "your_file.txt"
   test(filename)

------------------------------------------------------------------------------------------------

Q4 .  Now, add a line in your mymod module that calls the test function automatically only when the module is run as a script, not when it is imported The line you add will probably test the value of __name__ for the string "__main__", as shown in this unit. Try running your module  then, import the module and test its functions interactively. 

mymod.py 

def test(name):
    f = open(name,"r")
    readfile = f.readlines()
    countLines(readfile)
    countChars(readfile)
    
def countLines(a):
    return print(len(a))

def countChars(a):
    count = 0
    for line in a:
        for ch in line:
            if(ch.isalpha()):
                count+=1
    print(count)

if __name__ == "__main__":
    filename = "example.txt" 
    test(filename)

------------------------------
importfile.py in same directory 

import mymod
mymod.test("example.txt")

------------------------------
this __name__ = __main__ will only execute in main file and do not runs when module is imported.
-----------------------------------------------------------------------------------------

Q5. Write a second module, myclient.py, which imports mymod and tests its functions; run myclient . If myclient uses from to fetch from mymod, will mymod’s functions be accessible from the top level of myclient? What if it imports with import instead? Try coding both variations in myclient and test interactively, by importing myclient .

Solution 1 :
from mymod import test
test("example.txt")

Solution 2 :

import mymod

filename = "example.txt"
mymod.test("example.txt")
---------------------------------------------------------------------------------------------

Q6.      Package imports. Finally, import your file from a package. Create a subdirectory called mypkg nested in a directory on your module import search path, move the mymod.py module file you created in exercises 2 or 4 into the new directory, and try to import it with a package import of the form: import mypkg.mymod.

Solution :

Run Above commands in idle

import os 
os.chdir("C:\\Users\\Shivam\\Desktop")
os.mkdir("mypkg")
old_path = "C:\\Users\\Shivam\\Desktop\\mymod.py"
new_path = "C:\\Users\\Shivam\\Desktop\\mypkg\\mymod.py"
os.rename(old_path,new_path)
-------------------------------------
now open eample.py file to import this subpackage in this python file .

import mypkg.mymod
mypkg.mymod.test("example.txt")
-----------------------------------------------------------------------------------------------------

Q7.   Experiment with module reloads: perform the tests in the changer.py example, changing the called function’s message and/or behavior repeatedly, without stopping the Python interpreter. Depending on your system, you might be able to edit changer in another window.

Solution :

changer.py

def printmsg():
	return "this is regular msg."

if __name__ = "__main__":
	print(getmsg())

--------------------------

python idle :

python changer.py

output : this is regular msg.

---------------------------
update chager.py without closing it

def printmsg():
	return "this is new updated msg."

if __name__ = "__main__":
	print(getmsg())
----------------------------
python idle :

importlib.reload(changer)
python changer.py

----------------------------------------------------------------------------------------------------



